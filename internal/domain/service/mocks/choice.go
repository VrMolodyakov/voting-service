// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/service/choiceService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/VrMolodyakov/vote-service/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacheService) Get(voteTitle, choiceTitle string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", voteTitle, choiceTitle)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheServiceMockRecorder) Get(voteTitle, choiceTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheService)(nil).Get), voteTitle, choiceTitle)
}

// Save mocks base method.
func (m *MockCacheService) Save(voteTitle, choiceTitle string, count int, expireAt time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", voteTitle, choiceTitle, count, expireAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCacheServiceMockRecorder) Save(voteTitle, choiceTitle, count, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCacheService)(nil).Save), voteTitle, choiceTitle, count, expireAt)
}

// MockVoteService is a mock of VoteService interface.
type MockVoteService struct {
	ctrl     *gomock.Controller
	recorder *MockVoteServiceMockRecorder
}

// MockVoteServiceMockRecorder is the mock recorder for MockVoteService.
type MockVoteServiceMockRecorder struct {
	mock *MockVoteService
}

// NewMockVoteService creates a new mock instance.
func NewMockVoteService(ctrl *gomock.Controller) *MockVoteService {
	mock := &MockVoteService{ctrl: ctrl}
	mock.recorder = &MockVoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteService) EXPECT() *MockVoteServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVoteService) Create(ctx context.Context, title string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, title)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVoteServiceMockRecorder) Create(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVoteService)(nil).Create), ctx, title)
}

// Get mocks base method.
func (m *MockVoteService) Get(ctx context.Context, title string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, title)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVoteServiceMockRecorder) Get(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVoteService)(nil).Get), ctx, title)
}

// MockСhoiceRepository is a mock of СhoiceRepository interface.
type MockСhoiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockСhoiceRepositoryMockRecorder
}

// MockСhoiceRepositoryMockRecorder is the mock recorder for MockСhoiceRepository.
type MockСhoiceRepositoryMockRecorder struct {
	mock *MockСhoiceRepository
}

// NewMockСhoiceRepository creates a new mock instance.
func NewMockСhoiceRepository(ctrl *gomock.Controller) *MockСhoiceRepository {
	mock := &MockСhoiceRepository{ctrl: ctrl}
	mock.recorder = &MockСhoiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockСhoiceRepository) EXPECT() *MockСhoiceRepositoryMockRecorder {
	return m.recorder
}

// FindChoice mocks base method.
func (m *MockСhoiceRepository) FindChoice(ctx context.Context, id int, choiceTitle string) (entity.Choice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChoice", ctx, id, choiceTitle)
	ret0, _ := ret[0].(entity.Choice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChoice indicates an expected call of FindChoice.
func (mr *MockСhoiceRepositoryMockRecorder) FindChoice(ctx, id, choiceTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChoice", reflect.TypeOf((*MockСhoiceRepository)(nil).FindChoice), ctx, id, choiceTitle)
}

// FindChoices mocks base method.
func (m *MockСhoiceRepository) FindChoices(ctx context.Context, id int) ([]entity.Choice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindChoices", ctx, id)
	ret0, _ := ret[0].([]entity.Choice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChoices indicates an expected call of FindChoices.
func (mr *MockСhoiceRepositoryMockRecorder) FindChoices(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChoices", reflect.TypeOf((*MockСhoiceRepository)(nil).FindChoices), ctx, id)
}

// Insert mocks base method.
func (m *MockСhoiceRepository) Insert(ctx context.Context, choice entity.Choice) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, choice)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockСhoiceRepositoryMockRecorder) Insert(ctx, choice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockСhoiceRepository)(nil).Insert), ctx, choice)
}

// Update mocks base method.
func (m *MockСhoiceRepository) Update(ctx context.Context, count, voteId int, title string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, count, voteId, title)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockСhoiceRepositoryMockRecorder) Update(ctx, count, voteId, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockСhoiceRepository)(nil).Update), ctx, count, voteId, title)
}
