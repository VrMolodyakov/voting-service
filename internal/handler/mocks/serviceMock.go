// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/serviceInterface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/VrMolodyakov/vote-service/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockVoteService is a mock of VoteService interface.
type MockVoteService struct {
	ctrl     *gomock.Controller
	recorder *MockVoteServiceMockRecorder
}

// MockVoteServiceMockRecorder is the mock recorder for MockVoteService.
type MockVoteServiceMockRecorder struct {
	mock *MockVoteService
}

// NewMockVoteService creates a new mock instance.
func NewMockVoteService(ctrl *gomock.Controller) *MockVoteService {
	mock := &MockVoteService{ctrl: ctrl}
	mock.recorder = &MockVoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVoteService) EXPECT() *MockVoteServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVoteService) Create(ctx context.Context, vote string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, vote)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVoteServiceMockRecorder) Create(ctx, vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVoteService)(nil).Create), ctx, vote)
}

// Delete mocks base method.
func (m *MockVoteService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVoteServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVoteService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockVoteService) Get(ctx context.Context, title string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, title)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVoteServiceMockRecorder) Get(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVoteService)(nil).Get), ctx, title)
}

// MockChoiceService is a mock of ChoiceService interface.
type MockChoiceService struct {
	ctrl     *gomock.Controller
	recorder *MockChoiceServiceMockRecorder
}

// MockChoiceServiceMockRecorder is the mock recorder for MockChoiceService.
type MockChoiceServiceMockRecorder struct {
	mock *MockChoiceService
}

// NewMockChoiceService creates a new mock instance.
func NewMockChoiceService(ctrl *gomock.Controller) *MockChoiceService {
	mock := &MockChoiceService{ctrl: ctrl}
	mock.recorder = &MockChoiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChoiceService) EXPECT() *MockChoiceServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChoiceService) Create(ctx context.Context, choice entity.Choice) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, choice)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChoiceServiceMockRecorder) Create(ctx, choice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChoiceService)(nil).Create), ctx, choice)
}

// Get mocks base method.
func (m *MockChoiceService) Get(ctx context.Context, voteTitle string) ([]entity.Choice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, voteTitle)
	ret0, _ := ret[0].([]entity.Choice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockChoiceServiceMockRecorder) Get(ctx, voteTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChoiceService)(nil).Get), ctx, voteTitle)
}

// Update mocks base method.
func (m *MockChoiceService) Update(ctx context.Context, voteTitle, choiceTitle string, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, voteTitle, choiceTitle, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockChoiceServiceMockRecorder) Update(ctx, voteTitle, choiceTitle, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChoiceService)(nil).Update), ctx, voteTitle, choiceTitle, count)
}
