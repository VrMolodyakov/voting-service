// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/cacheService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisCache is a mock of RedisCache interface.
type MockRedisCache struct {
	ctrl     *gomock.Controller
	recorder *MockRedisCacheMockRecorder
}

// MockRedisCacheMockRecorder is the mock recorder for MockRedisCache.
type MockRedisCacheMockRecorder struct {
	mock *MockRedisCache
}

// NewMockRedisCache creates a new mock instance.
func NewMockRedisCache(ctrl *gomock.Controller) *MockRedisCache {
	mock := &MockRedisCache{ctrl: ctrl}
	mock.recorder = &MockRedisCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisCache) EXPECT() *MockRedisCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRedisCache) Get(voteTitle, choiceTitle string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", voteTitle, choiceTitle)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisCacheMockRecorder) Get(voteTitle, choiceTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisCache)(nil).Get), voteTitle, choiceTitle)
}

// Set mocks base method.
func (m *MockRedisCache) Set(voteTitle, choiceTitle string, count int, expireAt time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", voteTitle, choiceTitle, count, expireAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisCacheMockRecorder) Set(voteTitle, choiceTitle, count, expireAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisCache)(nil).Set), voteTitle, choiceTitle, count, expireAt)
}
